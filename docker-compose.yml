# Docker Compose configuration for Monad Synapse Casino Platform - Development
version: '3.8'

networks:
  monad-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  node-modules:
    driver: local

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: monad-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: monad_synapse
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - monad-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: monad-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - monad-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Main Web Application
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile.development
      target: runner
    container_name: monad-web
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_APP_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/monad_synapse
      - REDIS_URL=redis://redis:6379
      - NEXT_TELEMETRY_DISABLED=1
      - WATCHPACK_POLLING=true
      - GIT_USER_NAME=${GIT_USER_NAME:-Developer}
      - GIT_USER_EMAIL=${GIT_USER_EMAIL:-dev@monad-synapse.com}
    ports:
      - "3000:3000"
      - "9229:9229"  # Node.js debugging port
    volumes:
      - ./apps/web:/app:cached
      - node-modules:/app/node_modules
      - /app/.next
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - monad-network
    stdin_open: true
    tty: true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Blockchain Node (Mock for development)
  blockchain-mock:
    image: node:20-alpine
    container_name: monad-blockchain-mock
    restart: unless-stopped
    working_dir: /app
    environment:
      - NODE_ENV=development
      - PORT=8545
    ports:
      - "8545:8545"
    volumes:
      - ./scripts/blockchain-mock:/app:ro
    command: node server.js
    networks:
      - monad-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8545/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Development Tools Container
  dev-tools:
    image: node:20-alpine
    container_name: monad-dev-tools
    restart: "no"
    working_dir: /app
    volumes:
      - ./:/app:cached
      - node-modules:/app/apps/web/node_modules
    networks:
      - monad-network
    command: sleep infinity
    profiles:
      - tools

  # Database Administration (pgAdmin)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: monad-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@monad-synapse.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    volumes:
      - ./config/pgadmin-servers.json:/pgadmin4/servers.json:ro
    depends_on:
      - postgres
    networks:
      - monad-network
    profiles:
      - admin

  # Redis Administration (RedisInsight)
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: monad-redis-insight
    restart: unless-stopped
    ports:
      - "8001:8001"
    volumes:
      - ./data/redis-insight:/db:rw
    depends_on:
      - redis
    networks:
      - monad-network
    profiles:
      - admin

  # Nginx Reverse Proxy (for SSL termination in development)
  nginx:
    image: nginx:alpine
    container_name: monad-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.dev.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx:rw
    depends_on:
      - web
    networks:
      - monad-network
    profiles:
      - proxy

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: monad-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.dev.yml:/etc/prometheus/prometheus.yml:ro
      - ./data/prometheus:/prometheus:rw
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - monad-network
    profiles:
      - monitoring

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: monad-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - ./config/grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./data/grafana:/var/lib/grafana:rw
    depends_on:
      - prometheus
    networks:
      - monad-network
    profiles:
      - monitoring

  # Log Management - Loki
  loki:
    image: grafana/loki:latest
    container_name: monad-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./config/loki/loki.yml:/etc/loki/local-config.yaml:ro
      - ./data/loki:/loki:rw
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - monad-network
    profiles:
      - logging

  # Log Collection - Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: monad-promtail
    restart: unless-stopped
    volumes:
      - ./config/promtail/promtail.yml:/etc/promtail/config.yml:ro
      - ./logs:/var/log:ro
      - /var/log:/host/var/log:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - monad-network
    profiles:
      - logging

  # Mail Service (for testing)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: monad-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - monad-network
    profiles:
      - mail

  # File Storage (MinIO for S3-compatible storage)
  minio:
    image: minio/minio:latest
    container_name: monad-minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./data/minio:/data:rw
    command: server /data --console-address ":9001"
    networks:
      - monad-network
    profiles:
      - storage
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3