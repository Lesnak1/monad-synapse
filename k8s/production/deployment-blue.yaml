apiVersion: apps/v1
kind: Deployment
metadata:
  name: monad-synapse-blue
  namespace: production
  labels:
    app.kubernetes.io/name: monad-synapse
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: web-app
    app.kubernetes.io/version: "${IMAGE_TAG}"
    environment: production
    deployment-slot: blue
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: monad-synapse
      app.kubernetes.io/instance: production
      app.kubernetes.io/component: web-app
      deployment-slot: blue
  template:
    metadata:
      labels:
        app.kubernetes.io/name: monad-synapse
        app.kubernetes.io/instance: production
        app.kubernetes.io/component: web-app
        app.kubernetes.io/version: "${IMAGE_TAG}"
        environment: production
        deployment-slot: blue
        version: blue
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/api/metrics"
        config.linkerd.io/skip-inbound-ports: "4191,4192"
        config.linkerd.io/skip-outbound-ports: "4191,4192"
    spec:
      serviceAccountName: monad-synapse
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: monad-synapse
        image: "${IMAGE_TAG}"
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: ENVIRONMENT
          value: "production"
        - name: DEPLOYMENT_SLOT
          value: "blue"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        envFrom:
        - configMapRef:
            name: monad-synapse-config
        - secretRef:
            name: monad-synapse-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "1Gi"
            cpu: "1000m"
            ephemeral-storage: "2Gi"
        livenessProbe:
          httpGet:
            path: /api/health
            port: http
            httpHeaders:
            - name: User-Agent
              value: "k8s-liveness-probe"
          initialDelaySeconds: 60
          periodSeconds: 15
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /api/health/ready
            port: http
            httpHeaders:
            - name: User-Agent
              value: "k8s-readiness-probe"
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /api/health/startup
            port: http
            httpHeaders:
            - name: User-Agent
              value: "k8s-startup-probe"
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
          successThreshold: 1
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: nextjs-cache
          mountPath: /app/.next/cache
        - name: app-logs
          mountPath: /app/logs
      - name: nginx
        image: nginx:1.25-alpine
        ports:
        - name: http
          containerPort: 80
          protocol: TCP
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: tmp
          mountPath: /tmp
        - name: nginx-cache
          mountPath: /var/cache/nginx
        - name: nginx-run
          mountPath: /var/run
        - name: nginx-logs
          mountPath: /var/log/nginx
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 15
          timeoutSeconds: 3
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 2
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 101
          runAsGroup: 101
          capabilities:
            drop:
            - ALL
      # Log shipping sidecar
      - name: log-shipper
        image: fluent/fluent-bit:2.2
        env:
        - name: FLUENT_ELASTICSEARCH_HOST
          value: "elasticsearch.logging.svc.cluster.local"
        - name: FLUENT_ELASTICSEARCH_PORT
          value: "9200"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        volumeMounts:
        - name: app-logs
          mountPath: /var/log/app
        - name: nginx-logs
          mountPath: /var/log/nginx
        - name: fluent-bit-config
          mountPath: /fluent-bit/etc
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
      volumes:
      - name: tmp
        emptyDir:
          sizeLimit: 100Mi
      - name: nextjs-cache
        emptyDir:
          sizeLimit: 500Mi
      - name: nginx-cache
        emptyDir:
          sizeLimit: 100Mi
      - name: nginx-run
        emptyDir:
          sizeLimit: 10Mi
      - name: app-logs
        emptyDir:
          sizeLimit: 200Mi
      - name: nginx-logs
        emptyDir:
          sizeLimit: 100Mi
      - name: nginx-config
        configMap:
          name: nginx-config
      - name: fluent-bit-config
        configMap:
          name: fluent-bit-config
      restartPolicy: Always
      terminationGracePeriodSeconds: 45
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "2"
        - name: edns0
      nodeSelector:
        kubernetes.io/arch: amd64
        node-type: "production"
      tolerations:
      - key: "production-workloads"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app.kubernetes.io/name: monad-synapse
            deployment-slot: blue
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - monad-synapse
              - key: deployment-slot
                operator: In
                values:
                - blue
            topologyKey: kubernetes.io/hostname
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node-type
                operator: In
                values:
                - production-optimized
---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: monad-synapse-blue-hpa
  namespace: production
  labels:
    app.kubernetes.io/name: monad-synapse
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: hpa
    deployment-slot: blue
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: monad-synapse-blue
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: 1k
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 25
        periodSeconds: 60
      - type: Pods
        value: 1
        periodSeconds: 60
      selectPolicy: Min
---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: monad-synapse-blue-pdb
  namespace: production
  labels:
    app.kubernetes.io/name: monad-synapse
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: pdb
    deployment-slot: blue
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: monad-synapse
      deployment-slot: blue