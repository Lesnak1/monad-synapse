name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  NEXT_TELEMETRY_DISABLED: 1
  CI: true

jobs:
  # Code Quality and Security Checks
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.quality-check.outputs.should-deploy }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm --workspace apps/web ci --prefer-offline --no-audit

      - name: Type Check
        run: npm run typecheck

      - name: Lint Check
        run: npm run lint

      - name: Code Style Check
        working-directory: apps/web
        run: npx prettier --check "**/*.{ts,tsx,js,jsx,json,md}"

      - name: Security Audit
        run: |
          npm audit --audit-level=moderate
          npm --workspace apps/web audit --audit-level=moderate

      - name: Check for Vulnerabilities
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: |
          npx audit-ci --moderate
        continue-on-error: false

      - name: Quality Check Output
        id: quality-check
        run: echo "should-deploy=true" >> $GITHUB_OUTPUT

  # Comprehensive Testing Suite
  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: [quality-gate]
    strategy:
      matrix:
        test-type: [unit, integration]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm --workspace apps/web ci --prefer-offline --no-audit

      - name: Run Unit Tests
        if: matrix.test-type == 'unit'
        run: npm run test:ci
        env:
          NODE_ENV: test

      - name: Run Integration Tests
        if: matrix.test-type == 'integration'
        working-directory: apps/web
        run: npx jest __tests__/integration/ --ci --coverage=false --verbose
        env:
          NODE_ENV: test

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            apps/web/coverage/
            apps/web/jest-results.xml
          retention-days: 7

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [quality-gate]
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm --workspace apps/web ci --prefer-offline --no-audit

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript,typescript
          queries: security-extended,security-and-quality

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Semgrep SAST
        uses: securecodewarrior/github-action-add-sarif@v1
        with:
          sarif-file: semgrep.sarif
        continue-on-error: true
      - run: |
          pip install semgrep
          semgrep --config=auto --json --output=semgrep.json .
          semgrep --config=auto --sarif --output=semgrep.sarif .
        continue-on-error: true

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif

  # Build and Package
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [quality-gate, test-suite]
    if: needs.quality-gate.outputs.should-deploy == 'true'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm --workspace apps/web ci --prefer-offline --no-audit

      - name: Build Application
        run: npm run build:web
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1

      - name: Verify Build Output
        run: |
          ls -la apps/web/.next/
          du -sh apps/web/.next/

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: |
            apps/web/.next/
            apps/web/public/
          retention-days: 30

  # Coverage Report
  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [test-suite]
    if: always() && needs.test-suite.result == 'success'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm --workspace apps/web ci --prefer-offline --no-audit

      - name: Generate Coverage Report
        run: npm run test:coverage

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: apps/web/coverage/lcov.info
          flags: unittests
          name: monad-synapse-coverage
          fail_ci_if_error: true

      - name: Coverage Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: apps/web/coverage/coverage-summary.json

  # Performance Testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: apps/web/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Performance Testing Tools
        run: |
          npm install -g lighthouse clinic autocannon

      - name: Start Application
        run: |
          cd apps/web
          npm start &
          sleep 30
        env:
          NODE_ENV: production
          PORT: 3000

      - name: Run Lighthouse Performance Audit
        run: |
          lighthouse http://localhost:3000 --output json --output html --output-path ./lighthouse-report
          cat lighthouse-report.report.json | jq '.categories.performance.score'

      - name: Upload Performance Reports
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports-${{ github.sha }}
          path: |
            lighthouse-report.report.html
            lighthouse-report.report.json
          retention-days: 7

  # Dependency License Check
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install License Checker
        run: npm install -g license-checker

      - name: Check Licenses
        run: |
          cd apps/web
          license-checker --onlyAllow "MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD" --excludePrivatePackages

  # Final Status Check
  ci-status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [quality-gate, test-suite, security-scan, build, coverage, performance, license-check]
    if: always()
    steps:
      - name: Check CI Status
        run: |
          if [[ "${{ needs.quality-gate.result }}" == "success" && 
                "${{ needs.test-suite.result }}" == "success" && 
                "${{ needs.security-scan.result }}" == "success" && 
                "${{ needs.build.result }}" == "success" ]]; then
            echo "✅ CI Pipeline completed successfully"
            echo "ci-status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ CI Pipeline failed"
            echo "ci-status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Slack Notification
        if: always() && (github.ref == 'refs/heads/main' || github.event_name == 'pull_request')
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow