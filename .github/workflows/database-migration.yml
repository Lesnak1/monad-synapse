name: Database Migration Management

on:
  push:
    branches: [main, develop]
    paths:
      - 'migrations/**'
      - 'prisma/schema.prisma'
      - 'drizzle/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'migrations/**'
      - 'prisma/schema.prisma'
      - 'drizzle/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for migration'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      migration_action:
        description: 'Migration action to perform'
        required: true
        default: 'migrate'
        type: choice
        options:
          - migrate
          - rollback
          - status
          - validate
      force_migration:
        description: 'Force migration (use with caution)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'

jobs:
  # Migration Validation
  validate-migrations:
    name: Validate Migration Scripts
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event.inputs.migration_action == 'validate'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci --prefer-offline
          npm --workspace apps/web ci --prefer-offline

      - name: Validate Migration Syntax
        run: |
          echo "Validating migration scripts..."
          
          # Check for SQL syntax errors
          if command -v sqlfluff &> /dev/null; then
            find migrations -name "*.sql" -exec sqlfluff lint {} \;
          fi
          
          # Validate migration file naming convention
          python3 << 'EOF'
          import os
          import re
          import sys
          
          migration_dir = 'migrations'
          if not os.path.exists(migration_dir):
              print("No migrations directory found")
              sys.exit(0)
          
          pattern = re.compile(r'^\d{14}_[a-zA-Z0-9_]+\.(sql|js|ts)$')
          invalid_files = []
          
          for filename in os.listdir(migration_dir):
              if filename.startswith('.'):
                  continue
              if not pattern.match(filename):
                  invalid_files.append(filename)
          
          if invalid_files:
              print(f"Invalid migration file names: {invalid_files}")
              print("Migration files must follow format: YYYYMMDDHHMMSS_description.sql")
              sys.exit(1)
          else:
              print("All migration file names are valid")
          EOF

      - name: Check Migration Conflicts
        run: |
          echo "Checking for migration conflicts..."
          
          # Check for duplicate migration timestamps
          python3 << 'EOF'
          import os
          import sys
          from collections import Counter
          
          migration_dir = 'migrations'
          if not os.path.exists(migration_dir):
              sys.exit(0)
          
          timestamps = []
          for filename in os.listdir(migration_dir):
              if filename.startswith('.'):
                  continue
              timestamp = filename.split('_')[0]
              timestamps.append(timestamp)
          
          duplicates = [ts for ts, count in Counter(timestamps).items() if count > 1]
          if duplicates:
              print(f"Duplicate migration timestamps found: {duplicates}")
              sys.exit(1)
          else:
              print("No migration conflicts detected")
          EOF

      - name: Dry Run Migration Test
        run: |
          echo "Performing dry run migration test..."
          # Add database dry run test here
          # This could use a test database to validate migrations

  # Development Database Migration
  migrate-staging:
    name: Migrate Staging Database
    runs-on: ubuntu-latest
    needs: validate-migrations
    if: |
      always() && 
      (needs.validate-migrations.result == 'success' || needs.validate-migrations.result == 'skipped') &&
      (github.ref == 'refs/heads/develop' || 
       (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'))
    environment:
      name: staging-db
      url: https://staging.monad-synapse.com/admin/db-status
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci --prefer-offline
          npm --workspace apps/web ci --prefer-offline

      - name: Database Backup (Pre-Migration)
        run: |
          echo "Creating pre-migration database backup..."
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          BACKUP_NAME="staging_backup_${TIMESTAMP}"
          
          # Add your database backup command here
          # Example for PostgreSQL:
          # pg_dump $DATABASE_URL > backups/${BACKUP_NAME}.sql
          
          echo "Backup created: ${BACKUP_NAME}"
          echo "backup_name=${BACKUP_NAME}" >> $GITHUB_ENV

      - name: Check Migration Status
        run: |
          echo "Checking current migration status..."
          # Add migration status check command here
          # This should show current migration state

      - name: Run Database Migration
        id: migration
        run: |
          echo "Running database migration..."
          
          # Add your migration command here
          # Example for Prisma:
          # npx prisma migrate deploy
          # Example for Drizzle:
          # npx drizzle-kit push:pg
          
          echo "Migration completed successfully"
          echo "migration_status=success" >> $GITHUB_OUTPUT
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}

      - name: Verify Migration
        run: |
          echo "Verifying migration results..."
          # Add migration verification steps here
          # This could include:
          # - Checking table structure
          # - Validating data integrity
          # - Running test queries

      - name: Rollback on Failure
        if: failure() && steps.migration.outputs.migration_status != 'success'
        run: |
          echo "Migration failed, attempting rollback..."
          # Add rollback logic here
          # This could restore from the backup created earlier

      - name: Update Migration Log
        run: |
          echo "Updating migration log..."
          echo "$(date): Migration completed for staging environment" >> migration-log.txt

      - name: Notify Migration Status
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#database'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            Database Migration - Staging
            Status: ${{ job.status }}
            Environment: Staging
            Backup: ${{ env.backup_name }}

  # Production Database Migration
  migrate-production:
    name: Migrate Production Database
    runs-on: ubuntu-latest
    needs: [validate-migrations, migrate-staging]
    if: |
      always() && 
      needs.validate-migrations.result == 'success' && 
      needs.migrate-staging.result == 'success' &&
      (github.ref == 'refs/heads/main' || 
       (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'))
    environment:
      name: production-db
      url: https://monad-synapse.com/admin/db-status
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci --prefer-offline
          npm --workspace apps/web ci --prefer-offline

      - name: Production Pre-Flight Checks
        run: |
          echo "Running production pre-flight checks..."
          
          # Check database connectivity
          echo "Checking database connectivity..."
          
          # Check migration compatibility
          echo "Checking migration compatibility..."
          
          # Check for blocking operations
          echo "Checking for potentially blocking operations..."
          
          # Validate backup availability
          echo "Validating backup systems..."

      - name: Maintenance Mode (Enable)
        if: github.event.inputs.force_migration == 'true'
        run: |
          echo "Enabling maintenance mode..."
          # Add maintenance mode enablement here
          # This could update a feature flag or configuration

      - name: Database Backup (Production)
        run: |
          echo "Creating production database backup..."
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          BACKUP_NAME="production_backup_${TIMESTAMP}"
          
          # Add your production database backup command here
          # This should be more comprehensive than staging
          
          echo "Production backup created: ${BACKUP_NAME}"
          echo "prod_backup_name=${BACKUP_NAME}" >> $GITHUB_ENV

      - name: Migration Approval Gate
        uses: trstringer/manual-approval@v1
        if: github.event_name != 'workflow_dispatch' || github.event.inputs.force_migration != 'true'
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ secrets.PRODUCTION_APPROVERS }}
          minimum-approvals: 2
          issue-title: "Production Database Migration Approval Required"
          issue-body: |
            ## Production Database Migration Request
            
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            **Environment:** Production
            **Backup:** ${{ env.prod_backup_name }}
            
            ### Migration Details
            Please review the migration scripts and approve this deployment.
            
            ### Checklist
            - [ ] Migration scripts have been reviewed
            - [ ] Staging migration completed successfully
            - [ ] Backup has been verified
            - [ ] Rollback plan is in place
            
            **Warning:** This will modify the production database.

      - name: Run Production Migration
        id: prod_migration
        run: |
          echo "Running production database migration..."
          
          # Add your production migration command here
          # This should include additional safety checks
          
          echo "Production migration completed successfully"
          echo "migration_status=success" >> $GITHUB_OUTPUT
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}

      - name: Post-Migration Verification
        run: |
          echo "Running post-migration verification..."
          
          # Add comprehensive verification steps
          # - Data integrity checks
          # - Performance validation
          # - Application compatibility tests

      - name: Maintenance Mode (Disable)
        if: always()
        run: |
          echo "Disabling maintenance mode..."
          # Disable maintenance mode regardless of migration success/failure

      - name: Migration Rollback (Emergency)
        if: failure() && steps.prod_migration.outputs.migration_status != 'success'
        run: |
          echo "EMERGENCY: Production migration failed, initiating rollback..."
          # Add emergency rollback procedures
          # This should restore from backup and notify immediately

      - name: Update Production Migration Log
        run: |
          echo "Updating production migration log..."
          echo "$(date): Production migration completed" >> production-migration-log.txt

      - name: Notify Production Migration
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#production-alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            🚨 PRODUCTION DATABASE MIGRATION 🚨
            Status: ${{ job.status }}
            Environment: Production
            Backup: ${{ env.prod_backup_name }}
            Time: $(date)
            
            ${{ job.status == 'success' && '✅ Migration completed successfully' || '❌ Migration failed - check logs immediately' }}

  # Migration Status Report
  migration-status:
    name: Migration Status Report
    runs-on: ubuntu-latest
    needs: [migrate-staging, migrate-production]
    if: always()
    
    steps:
      - name: Generate Migration Report
        run: |
          echo "# Database Migration Report" > migration-report.md
          echo "**Date:** $(date)" >> migration-report.md
          echo "" >> migration-report.md
          
          echo "## Migration Results" >> migration-report.md
          echo "- **Staging Migration:** ${{ needs.migrate-staging.result }}" >> migration-report.md
          echo "- **Production Migration:** ${{ needs.migrate-production.result }}" >> migration-report.md
          echo "" >> migration-report.md
          
          echo "## Environment Status" >> migration-report.md
          echo "- Staging Database: Updated" >> migration-report.md
          echo "- Production Database: ${{ needs.migrate-production.result == 'success' && 'Updated' || 'Unchanged' }}" >> migration-report.md

      - name: Upload Migration Report
        uses: actions/upload-artifact@v4
        with:
          name: migration-report
          path: migration-report.md
          retention-days: 90

  # Database Health Check Post-Migration
  post-migration-health:
    name: Post-Migration Health Check
    runs-on: ubuntu-latest
    needs: [migrate-production]
    if: needs.migrate-production.result == 'success'
    
    steps:
      - name: Database Performance Check
        run: |
          echo "Running post-migration database performance check..."
          # Add database performance validation
          # This could include query performance tests, connection pool validation, etc.

      - name: Application Health Verification
        run: |
          echo "Verifying application health after migration..."
          # Test critical application endpoints to ensure they work with new schema

      - name: Monitoring Alert Setup
        run: |
          echo "Setting up enhanced monitoring for post-migration period..."
          # Configure additional monitoring/alerting for the post-migration period