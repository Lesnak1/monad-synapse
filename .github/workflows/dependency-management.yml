name: Dependency Management & Security Scanning

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [main, develop]
    paths:
      - 'package*.json'
      - 'apps/web/package*.json'
      - '.github/workflows/dependency-management.yml'
  pull_request:
    paths:
      - 'package*.json'
      - 'apps/web/package*.json'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of updates to apply'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - all
      create_pr:
        description: 'Create PR for updates'
        required: false
        default: true
        type: boolean

concurrency:
  group: dependency-management-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'

jobs:
  # Dependency Vulnerability Scanning
  vulnerability-scan:
    name: Vulnerability Scanning
    runs-on: ubuntu-latest
    outputs:
      vulnerabilities-found: ${{ steps.scan-results.outputs.vulnerabilities-found }}
      critical-count: ${{ steps.scan-results.outputs.critical-count }}
      high-count: ${{ steps.scan-results.outputs.high-count }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm --workspace apps/web ci --prefer-offline --no-audit

      - name: NPM Audit
        id: npm-audit
        run: |
          # Run npm audit and capture output
          npm audit --json > npm-audit-root.json || true
          cd apps/web && npm audit --json > ../npm-audit-web.json || true
          cd ..
        continue-on-error: true

      - name: Parse Audit Results
        id: scan-results
        run: |
          # Parse audit results from both workspaces
          CRITICAL_ROOT=$(jq -r '.metadata.vulnerabilities.critical // 0' npm-audit-root.json)
          HIGH_ROOT=$(jq -r '.metadata.vulnerabilities.high // 0' npm-audit-root.json)
          CRITICAL_WEB=$(jq -r '.metadata.vulnerabilities.critical // 0' npm-audit-web.json)
          HIGH_WEB=$(jq -r '.metadata.vulnerabilities.high // 0' npm-audit-web.json)
          
          TOTAL_CRITICAL=$((CRITICAL_ROOT + CRITICAL_WEB))
          TOTAL_HIGH=$((HIGH_ROOT + HIGH_WEB))
          TOTAL_VULNS=$((TOTAL_CRITICAL + TOTAL_HIGH))
          
          echo "critical-count=$TOTAL_CRITICAL" >> $GITHUB_OUTPUT
          echo "high-count=$TOTAL_HIGH" >> $GITHUB_OUTPUT
          echo "vulnerabilities-found=$([[ $TOTAL_VULNS -gt 0 ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          
          echo "Found $TOTAL_CRITICAL critical and $TOTAL_HIGH high vulnerabilities"

      - name: Snyk Vulnerability Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json > snyk-report.json
        continue-on-error: true

      - name: OSSI Vulnerability Scan
        uses: sonatypecommunity/nancy-github-action@main
        with:
          input-file: package-lock.json
        continue-on-error: true

      - name: Upload Vulnerability Reports
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-reports-${{ github.run_number }}
          path: |
            npm-audit-root.json
            npm-audit-web.json
            snyk-report.json
          retention-days: 30

      - name: Create Vulnerability Issue
        if: steps.scan-results.outputs.vulnerabilities-found == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const critical = ${{ steps.scan-results.outputs.critical-count }};
            const high = ${{ steps.scan-results.outputs.high-count }};
            
            if (critical > 0 || high > 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Security Alert: ${critical} Critical, ${high} High Vulnerabilities Found`,
                body: `## Security Vulnerability Report
                
                **Critical Vulnerabilities:** ${critical}
                **High Vulnerabilities:** ${high}
                **Scan Date:** ${new Date().toISOString()}
                
                Please review the vulnerability reports and apply necessary updates.
                
                ### Actions Required:
                - [ ] Review vulnerability details
                - [ ] Apply security updates
                - [ ] Test updated dependencies
                - [ ] Deploy fixes
                
                **Artifacts:** Check the workflow run for detailed reports.`,
                labels: ['security', 'vulnerability', 'high-priority']
              });
            }

  # License Compliance Scanning
  license-compliance:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm --workspace apps/web ci --prefer-offline --no-audit

      - name: Install License Checker
        run: npm install -g license-checker license-checker-rseidelsohn

      - name: Check Licenses - Root
        run: |
          license-checker --json --out root-licenses.json
          license-checker --onlyAllow "MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD;Unlicense" --excludePrivatePackages
        continue-on-error: true

      - name: Check Licenses - Web App
        run: |
          cd apps/web
          license-checker --json --out ../web-licenses.json
          license-checker --onlyAllow "MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD;Unlicense" --excludePrivatePackages
        continue-on-error: true

      - name: FOSSA License Scan
        uses: fossas/fossa-action@main
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}
          run-tests: true
        continue-on-error: true

      - name: Upload License Reports
        uses: actions/upload-artifact@v4
        with:
          name: license-reports-${{ github.run_number }}
          path: |
            root-licenses.json
            web-licenses.json
          retention-days: 30

  # Dependency Updates
  dependency-updates:
    name: Dependency Updates
    runs-on: ubuntu-latest
    needs: [vulnerability-scan]
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    outputs:
      updates-available: ${{ steps.check-updates.outputs.updates-available }}
      security-updates: ${{ steps.check-updates.outputs.security-updates }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm --workspace apps/web ci --prefer-offline --no-audit

      - name: Install Update Tools
        run: |
          npm install -g npm-check-updates ncu

      - name: Check for Updates
        id: check-updates
        run: |
          # Check root package updates
          ncu --jsonUpgraded > root-updates.json || echo "{}" > root-updates.json
          
          # Check web app updates
          cd apps/web
          ncu --jsonUpgraded > ../web-updates.json || echo "{}" > ../web-updates.json
          cd ..
          
          # Count available updates
          ROOT_UPDATES=$(jq 'keys | length' root-updates.json)
          WEB_UPDATES=$(jq 'keys | length' web-updates.json)
          TOTAL_UPDATES=$((ROOT_UPDATES + WEB_UPDATES))
          
          echo "updates-available=$([[ $TOTAL_UPDATES -gt 0 ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "security-updates=${{ needs.vulnerability-scan.outputs.vulnerabilities-found }}" >> $GITHUB_OUTPUT
          
          echo "Found $TOTAL_UPDATES dependency updates available"

      - name: Apply Security Updates
        if: needs.vulnerability-scan.outputs.vulnerabilities-found == 'true'
        run: |
          # Apply security updates first
          npm audit fix --force || true
          cd apps/web && npm audit fix --force || true

      - name: Apply Patch Updates
        if: github.event.inputs.update_type == 'patch' || github.event.inputs.update_type == 'all' || github.event_name == 'schedule'
        run: |
          ncu --target patch --upgrade
          cd apps/web && ncu --target patch --upgrade

      - name: Apply Minor Updates
        if: github.event.inputs.update_type == 'minor' || github.event.inputs.update_type == 'all'
        run: |
          ncu --target minor --upgrade
          cd apps/web && ncu --target minor --upgrade

      - name: Apply Major Updates
        if: github.event.inputs.update_type == 'major' || github.event.inputs.update_type == 'all'
        run: |
          ncu --target major --upgrade
          cd apps/web && ncu --target major --upgrade

      - name: Update Lock Files
        if: steps.check-updates.outputs.updates-available == 'true' || needs.vulnerability-scan.outputs.vulnerabilities-found == 'true'
        run: |
          npm install
          cd apps/web && npm install

      - name: Run Tests After Updates
        if: steps.check-updates.outputs.updates-available == 'true' || needs.vulnerability-scan.outputs.vulnerabilities-found == 'true'
        run: |
          npm run test:ci
          npm run typecheck
          npm run lint
        continue-on-error: true

      - name: Build After Updates
        if: steps.check-updates.outputs.updates-available == 'true' || needs.vulnerability-scan.outputs.vulnerabilities-found == 'true'
        run: |
          npm run build:web
        continue-on-error: true

      - name: Generate Update Summary
        if: steps.check-updates.outputs.updates-available == 'true' || needs.vulnerability-scan.outputs.vulnerabilities-found == 'true'
        run: |
          echo "# Dependency Update Summary" > update-summary.md
          echo "" >> update-summary.md
          echo "## Root Package Updates" >> update-summary.md
          if [[ -s root-updates.json && $(jq 'keys | length' root-updates.json) -gt 0 ]]; then
            jq -r 'to_entries[] | "- \(.key): \(.value)"' root-updates.json >> update-summary.md
          else
            echo "No updates for root package" >> update-summary.md
          fi
          echo "" >> update-summary.md
          echo "## Web App Updates" >> update-summary.md
          if [[ -s web-updates.json && $(jq 'keys | length' web-updates.json) -gt 0 ]]; then
            jq -r 'to_entries[] | "- \(.key): \(.value)"' web-updates.json >> update-summary.md
          else
            echo "No updates for web app" >> update-summary.md
          fi
          
          if [[ "${{ needs.vulnerability-scan.outputs.vulnerabilities-found }}" == "true" ]]; then
            echo "" >> update-summary.md
            echo "## Security Updates Applied" >> update-summary.md
            echo "- Critical vulnerabilities: ${{ needs.vulnerability-scan.outputs.critical-count }}" >> update-summary.md
            echo "- High vulnerabilities: ${{ needs.vulnerability-scan.outputs.high-count }}" >> update-summary.md
          fi

      - name: Upload Update Reports
        if: steps.check-updates.outputs.updates-available == 'true' || needs.vulnerability-scan.outputs.vulnerabilities-found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: dependency-updates-${{ github.run_number }}
          path: |
            root-updates.json
            web-updates.json
            update-summary.md
          retention-days: 30

      - name: Create Pull Request
        if: (steps.check-updates.outputs.updates-available == 'true' || needs.vulnerability-scan.outputs.vulnerabilities-found == 'true') && (github.event.inputs.create_pr != 'false' || github.event_name == 'schedule')
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            chore: update dependencies
            
            - Security fixes: ${{ needs.vulnerability-scan.outputs.vulnerabilities-found == 'true' && 'Yes' || 'No' }}
            - Critical vulnerabilities fixed: ${{ needs.vulnerability-scan.outputs.critical-count }}
            - High vulnerabilities fixed: ${{ needs.vulnerability-scan.outputs.high-count }}
            - Update type: ${{ github.event.inputs.update_type || 'patch' }}
          title: 'chore: dependency updates (${{ github.event.inputs.update_type || 'patch' }})'
          body-path: update-summary.md
          branch: dependency-updates/${{ github.run_number }}
          delete-branch: true
          labels: |
            dependencies
            automated-pr
            ${{ needs.vulnerability-scan.outputs.vulnerabilities-found == 'true' && 'security' || '' }}
          reviewers: ${{ secrets.DEPENDENCY_UPDATE_REVIEWERS }}
          draft: false

  # Dependency Graph Analysis
  dependency-analysis:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm --workspace apps/web ci --prefer-offline --no-audit

      - name: Analyze Bundle Size
        run: |
          cd apps/web
          npx webpack-bundle-analyzer .next/static/chunks/*.js --report bundle-analysis.html --mode static --no-open

      - name: Dependency Tree Analysis
        run: |
          npm list --depth=0 --json > root-dependency-tree.json
          cd apps/web && npm list --depth=0 --json > ../web-dependency-tree.json

      - name: Check for Unused Dependencies
        run: |
          npx depcheck --json > depcheck-report.json || true

      - name: Package Size Analysis
        run: |
          npx package-size-analyzer > package-size-report.txt || true

      - name: Upload Analysis Reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-analysis-${{ github.run_number }}
          path: |
            apps/web/bundle-analysis.html
            root-dependency-tree.json
            web-dependency-tree.json
            depcheck-report.json
            package-size-report.txt
          retention-days: 30

  # Security Advisory Check
  security-advisory:
    name: Security Advisory Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: GitHub Security Advisory Check
        uses: actions/github-script@v7
        with:
          script: |
            // Check for GitHub security advisories affecting our dependencies
            const fs = require('fs');
            const packageJson = JSON.parse(fs.readFileSync('apps/web/package.json', 'utf8'));
            const dependencies = Object.keys({...packageJson.dependencies, ...packageJson.devDependencies});
            
            for (const dep of dependencies.slice(0, 10)) { // Limit to avoid rate limiting
              try {
                const advisories = await github.rest.securityAdvisories.listRepositoryAdvisories({
                  owner: 'github',
                  repo: 'advisory-database',
                  per_page: 10
                });
                console.log(`Checked ${dep}: ${advisories.data.length} advisories`);
              } catch (error) {
                console.log(`Error checking ${dep}: ${error.message}`);
              }
            }

      - name: CVE Database Check
        run: |
          # Check for known CVEs in dependencies
          echo "Checking CVE database..."
          # This would integrate with a CVE database API

  # Notification and Reporting
  notification:
    name: Notification
    runs-on: ubuntu-latest
    needs: [vulnerability-scan, dependency-updates, license-compliance]
    if: always()
    steps:
      - name: Critical Vulnerability Alert
        if: needs.vulnerability-scan.outputs.critical-count > 0
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#security-alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            🚨 CRITICAL SECURITY ALERT 🚨
            Repository: Monad Synapse
            Critical Vulnerabilities: ${{ needs.vulnerability-scan.outputs.critical-count }}
            High Vulnerabilities: ${{ needs.vulnerability-scan.outputs.high-count }}
            
            Immediate action required!

      - name: Dependency Update Summary
        if: needs.dependency-updates.outputs.updates-available == 'true'
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ needs.dependency-updates.result }}
          channel: '#dependencies'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            📦 Dependency Updates Available
            Repository: Monad Synapse
            Security Updates: ${{ needs.dependency-updates.outputs.security-updates == 'true' && 'Yes' || 'No' }}
            PR Created: ${{ github.event.inputs.create_pr != 'false' && 'Yes' || 'No' }}

      - name: Weekly Dependency Report
        if: github.event_name == 'schedule' && github.event.schedule == '0 2 * * 0'
        uses: actions/github-script@v7
        with:
          script: |
            // Create weekly dependency health report
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Weekly Dependency Health Report - ${new Date().toISOString().split('T')[0]}`,
              body: `## Weekly Dependency Health Report
              
              **Report Date:** ${new Date().toISOString()}
              
              ### Security Status
              - Critical Vulnerabilities: ${{ needs.vulnerability-scan.outputs.critical-count }}
              - High Vulnerabilities: ${{ needs.vulnerability-scan.outputs.high-count }}
              
              ### Update Status
              - Updates Available: ${{ needs.dependency-updates.outputs.updates-available }}
              - Security Updates Applied: ${{ needs.dependency-updates.outputs.security-updates }}
              
              ### Actions Taken
              - Vulnerability scans completed
              - License compliance checked
              - Dependency analysis performed
              
              **Detailed reports available in workflow artifacts.**`,
              labels: ['dependencies', 'weekly-report', 'maintenance']
            });