name: Deploy to Production

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Version tag to deploy'
        required: true
        type: string
      force_deploy:
        description: 'Force deployment (skip manual approval)'
        required: false
        default: 'false'
        type: boolean
      rollback_version:
        description: 'Version to rollback to (if rollback needed)'
        required: false
        type: string

concurrency:
  group: production-deployment
  cancel-in-progress: false

env:
  NODE_VERSION: '20'
  DEPLOYMENT_ENV: 'production'
  NEXT_TELEMETRY_DISABLED: 1

jobs:
  # Validation and Pre-checks
  pre-production-validation:
    name: Pre-production Validation
    runs-on: ubuntu-latest
    outputs:
      deploy-ready: ${{ steps.validation.outputs.deploy-ready }}
      version-tag: ${{ steps.version.outputs.version-tag }}
      previous-version: ${{ steps.version.outputs.previous-version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Determine Version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION_TAG="${{ github.event.inputs.version_tag }}"
          else
            VERSION_TAG="${GITHUB_REF#refs/tags/}"
          fi
          
          # Get previous version for rollback
          PREVIOUS_VERSION=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          echo "version-tag=$VERSION_TAG" >> $GITHUB_OUTPUT
          echo "previous-version=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT
          echo "Deploying version: $VERSION_TAG"
          echo "Previous version: $PREVIOUS_VERSION"

      - name: Validate Version Tag
        run: |
          VERSION_TAG="${{ steps.version.outputs.version-tag }}"
          if [[ ! "$VERSION_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version tag format: $VERSION_TAG"
            echo "Expected format: v1.2.3"
            exit 1
          fi

      - name: Check Staging Deployment
        run: |
          # Verify that this version was deployed to staging first
          echo "Verifying staging deployment status..."
          # Add actual staging verification logic here

      - name: Security and Compliance Check
        run: |
          # Run final security checks
          echo "Running security compliance checks..."
          # Add security validation logic

      - name: Production Readiness Validation
        id: validation
        run: |
          echo "deploy-ready=true" >> $GITHUB_OUTPUT

  # Manual Approval Gate
  manual-approval:
    name: Production Deployment Approval
    runs-on: ubuntu-latest
    needs: [pre-production-validation]
    environment: 
      name: production-approval
    if: needs.pre-production-validation.outputs.deploy-ready == 'true' && github.event.inputs.force_deploy != 'true'
    steps:
      - name: Request Manual Approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: ${{ secrets.PRODUCTION_APPROVERS }}
          minimum-approvals: 2
          issue-title: "Production Deployment Approval - ${{ needs.pre-production-validation.outputs.version-tag }}"
          issue-body: |
            ## Production Deployment Request
            
            **Version:** ${{ needs.pre-production-validation.outputs.version-tag }}
            **Commit:** ${{ github.sha }}
            **Triggered by:** ${{ github.actor }}
            
            ### Pre-deployment Checklist:
            - [ ] Staging deployment verified
            - [ ] Security scans passed
            - [ ] Performance tests passed
            - [ ] Database migrations reviewed
            - [ ] Rollback plan confirmed
            
            Please review and approve this production deployment.

  # Build Production Artifacts
  build-production:
    name: Build Production
    runs-on: ubuntu-latest
    needs: [pre-production-validation, manual-approval]
    if: always() && (needs.manual-approval.result == 'success' || (needs.pre-production-validation.outputs.deploy-ready == 'true' && github.event.inputs.force_deploy == 'true'))
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.pre-production-validation.outputs.version-tag }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit --production=false
          npm --workspace apps/web ci --prefer-offline --no-audit --production=false

      - name: Run Final Tests
        run: |
          npm run test:ci
          npm run typecheck
          npm run lint

      - name: Build Production Application
        run: npm run build:web
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1
          # Production environment variables
          NEXT_PUBLIC_APP_ENV: production
          NEXT_PUBLIC_API_BASE_URL: ${{ secrets.PROD_API_BASE_URL }}
          NEXT_PUBLIC_BLOCKCHAIN_NETWORK: ${{ secrets.PROD_BLOCKCHAIN_NETWORK }}
          NEXT_PUBLIC_CONTRACT_ADDRESS: ${{ secrets.PROD_CONTRACT_ADDRESS }}

      - name: Create Production Package
        run: |
          tar -czf production-build-${{ needs.pre-production-validation.outputs.version-tag }}.tar.gz \
            -C apps/web .next package.json next.config.mjs public/

      - name: Upload Production Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build-${{ needs.pre-production-validation.outputs.version-tag }}
          path: production-build-${{ needs.pre-production-validation.outputs.version-tag }}.tar.gz
          retention-days: 90

  # Container Build and Push
  container-production:
    name: Build Production Container
    runs-on: ubuntu-latest
    needs: [pre-production-validation, build-production]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.pre-production-validation.outputs.version-tag }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.CONTAINER_REGISTRY }}
          username: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-build-${{ needs.pre-production-validation.outputs.version-tag }}
          path: ./

      - name: Extract Build
        run: |
          mkdir -p apps/web
          tar -xzf production-build-${{ needs.pre-production-validation.outputs.version-tag }}.tar.gz -C apps/web/

      - name: Build and Push Container Image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./apps/web
          file: ./apps/web/Dockerfile.production
          push: true
          tags: |
            ${{ secrets.CONTAINER_REGISTRY }}/monad-synapse:latest
            ${{ secrets.CONTAINER_REGISTRY }}/monad-synapse:${{ needs.pre-production-validation.outputs.version-tag }}
            ${{ secrets.CONTAINER_REGISTRY }}/monad-synapse:production-latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          provenance: true
          sbom: true

      - name: Sign Container Image
        uses: sigstore/cosign-installer@v3
      - name: Sign the published Docker image
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          cosign sign --yes ${{ secrets.CONTAINER_REGISTRY }}/monad-synapse@${{ steps.build.outputs.digest }}

  # Database Migrations
  database-migration:
    name: Database Migration
    runs-on: ubuntu-latest
    needs: [pre-production-validation, build-production]
    environment: 
      name: production
    if: contains(github.event.head_commit.message, '[migrate]') || github.event.inputs.version_tag != ''
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Database Migration Tools
        run: |
          # Install database migration tools
          echo "Setting up database migration tools..."

      - name: Create Database Backup
        run: |
          # Create database backup before migration
          echo "Creating database backup..."
          BACKUP_FILE="prod-db-backup-$(date +%Y%m%d-%H%M%S).sql"
          echo "backup-file=$BACKUP_FILE" >> $GITHUB_ENV

      - name: Run Database Migrations
        run: |
          # Run production database migrations
          echo "Running database migrations..."
          # Example: npm run migrate:prod

      - name: Verify Database Migration
        run: |
          # Verify database migration success
          echo "Verifying database migrations..."

  # Blue-Green Deployment
  deploy-blue-green:
    name: Blue-Green Deployment
    runs-on: ubuntu-latest
    needs: [pre-production-validation, container-production, database-migration]
    environment: 
      name: production
      url: https://monad-synapse.com
    outputs:
      deployment-slot: ${{ steps.deploy.outputs.deployment-slot }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure Kubernetes
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config

      - name: Determine Deployment Slot
        id: slot
        run: |
          # Determine which slot (blue/green) to deploy to
          CURRENT_SLOT=$(kubectl get service monad-synapse-prod -o jsonpath='{.spec.selector.slot}' || echo "blue")
          if [[ "$CURRENT_SLOT" == "blue" ]]; then
            NEW_SLOT="green"
          else
            NEW_SLOT="blue"
          fi
          echo "deployment-slot=$NEW_SLOT" >> $GITHUB_OUTPUT
          echo "Deploying to slot: $NEW_SLOT"

      - name: Deploy to Inactive Slot
        id: deploy
        run: |
          SLOT="${{ steps.slot.outputs.deployment-slot }}"
          
          # Deploy to inactive slot
          kubectl set image deployment/monad-synapse-$SLOT \
            monad-synapse=${{ secrets.CONTAINER_REGISTRY }}/monad-synapse:${{ needs.pre-production-validation.outputs.version-tag }} \
            -n production
          
          # Wait for rollout
          kubectl rollout status deployment/monad-synapse-$SLOT -n production --timeout=600s
          
          echo "deployment-slot=$SLOT" >> $GITHUB_OUTPUT

      - name: Health Check New Deployment
        run: |
          SLOT="${{ steps.deploy.outputs.deployment-slot }}"
          
          # Wait for pods to be ready
          kubectl wait --for=condition=ready pod -l app=monad-synapse,slot=$SLOT -n production --timeout=300s
          
          # Get service endpoint for testing
          SERVICE_IP=$(kubectl get service monad-synapse-$SLOT -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          
          # Health checks
          for i in {1..10}; do
            if curl -f http://$SERVICE_IP/api/health; then
              echo "Health check passed"
              break
            fi
            echo "Health check attempt $i failed, retrying..."
            sleep 30
          done

  # Traffic Switch
  traffic-switch:
    name: Switch Traffic
    runs-on: ubuntu-latest
    needs: [deploy-blue-green]
    environment: 
      name: production-traffic-switch
    steps:
      - name: Manual Traffic Switch Approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: ${{ secrets.PRODUCTION_APPROVERS }}
          minimum-approvals: 1
          issue-title: "Production Traffic Switch - ${{ needs.pre-production-validation.outputs.version-tag }}"
          issue-body: |
            ## Traffic Switch Request
            
            **Version:** ${{ needs.pre-production-validation.outputs.version-tag }}
            **Target Slot:** ${{ needs.deploy-blue-green.outputs.deployment-slot }}
            
            New deployment is healthy and ready. Approve to switch production traffic.

      - name: Switch Production Traffic
        run: |
          SLOT="${{ needs.deploy-blue-green.outputs.deployment-slot }}"
          
          # Update service selector to point to new slot
          kubectl patch service monad-synapse-prod \
            -p '{"spec":{"selector":{"slot":"'$SLOT'"}}}' \
            -n production
          
          echo "Traffic switched to slot: $SLOT"

      - name: Verify Traffic Switch
        run: |
          # Verify traffic is flowing to new deployment
          sleep 30
          curl -f https://monad-synapse.com/api/health
          curl -f https://monad-synapse.com/api/version | grep "${{ needs.pre-production-validation.outputs.version-tag }}"

  # Post-deployment Monitoring
  post-deploy-monitoring:
    name: Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: [traffic-switch, pre-production-validation]
    steps:
      - name: Monitor Application Metrics
        run: |
          # Monitor key metrics for 10 minutes
          for i in {1..20}; do
            # Check error rates
            ERROR_RATE=$(curl -s https://monad-synapse.com/api/metrics | jq '.error_rate')
            RESPONSE_TIME=$(curl -s https://monad-synapse.com/api/metrics | jq '.avg_response_time')
            
            echo "Error rate: $ERROR_RATE%, Response time: ${RESPONSE_TIME}ms"
            
            if (( $(echo "$ERROR_RATE > 5" | bc -l) )); then
              echo "Error rate too high: $ERROR_RATE%"
              exit 1
            fi
            
            if (( $(echo "$RESPONSE_TIME > 2000" | bc -l) )); then
              echo "Response time too high: ${RESPONSE_TIME}ms"
              exit 1
            fi
            
            sleep 30
          done

      - name: Synthetic Tests
        run: |
          # Run synthetic tests against production
          npm install -g @playwright/test
          npx playwright test --config=playwright.production.config.js

  # Cleanup Old Deployment
  cleanup-old-deployment:
    name: Cleanup Old Deployment
    runs-on: ubuntu-latest
    needs: [post-deploy-monitoring, deploy-blue-green]
    steps:
      - name: Scale Down Old Deployment
        run: |
          # Determine old slot
          NEW_SLOT="${{ needs.deploy-blue-green.outputs.deployment-slot }}"
          if [[ "$NEW_SLOT" == "blue" ]]; then
            OLD_SLOT="green"
          else
            OLD_SLOT="blue"
          fi
          
          # Scale down old deployment
          kubectl scale deployment monad-synapse-$OLD_SLOT --replicas=1 -n production
          
          echo "Scaled down old deployment slot: $OLD_SLOT"

  # Rollback Capability
  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: failure() && github.event.inputs.rollback_version != ''
    environment: 
      name: production-rollback
    steps:
      - name: Emergency Rollback
        run: |
          ROLLBACK_VERSION="${{ github.event.inputs.rollback_version }}"
          
          # Switch traffic back to previous version
          kubectl set image deployment/monad-synapse-blue \
            monad-synapse=${{ secrets.CONTAINER_REGISTRY }}/monad-synapse:$ROLLBACK_VERSION \
            -n production
          
          kubectl set image deployment/monad-synapse-green \
            monad-synapse=${{ secrets.CONTAINER_REGISTRY }}/monad-synapse:$ROLLBACK_VERSION \
            -n production
          
          # Wait for rollback
          kubectl rollout status deployment/monad-synapse-blue -n production --timeout=300s
          kubectl rollout status deployment/monad-synapse-green -n production --timeout=300s

      - name: Verify Rollback
        run: |
          curl -f https://monad-synapse.com/api/health
          curl -f https://monad-synapse.com/api/version

  # Notifications and Reporting
  deployment-notification:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [pre-production-validation, traffic-switch, post-deploy-monitoring]
    if: always()
    steps:
      - name: Success Notification
        if: needs.traffic-switch.result == 'success' && needs.post-deploy-monitoring.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#production-deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            ✅ Production Deployment Successful
            Version: ${{ needs.pre-production-validation.outputs.version-tag }}
            URL: https://monad-synapse.com
            Deployment Time: $(date)
            Previous Version: ${{ needs.pre-production-validation.outputs.previous-version }}

      - name: Failure Notification
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#production-alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            🚨 Production Deployment Failed
            Version: ${{ needs.pre-production-validation.outputs.version-tag }}
            Timestamp: $(date)
            Action Required: Manual intervention needed

      - name: Create Release Notes
        if: needs.traffic-switch.result == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: release } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: '${{ needs.pre-production-validation.outputs.version-tag }}',
              name: 'Release ${{ needs.pre-production-validation.outputs.version-tag }}',
              body: `## Production Release ${{ needs.pre-production-validation.outputs.version-tag }}
              
              ### Deployment Information
              - **Deployed At:** ${new Date().toISOString()}
              - **Deployment Slot:** ${{ needs.deploy-blue-green.outputs.deployment-slot }}
              - **Previous Version:** ${{ needs.pre-production-validation.outputs.previous-version }}
              
              ### Changes
              ${context.payload.head_commit ? context.payload.head_commit.message : 'Manual deployment'}
              
              ### Rollback Instructions
              If rollback is needed, use:
              \`\`\`
              gh workflow run deploy-production.yml -f rollback_version=${{ needs.pre-production-validation.outputs.previous-version }}
              \`\`\``,
              draft: false,
              prerelease: false
            });

      - name: Update Deployment Status
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 0,
              state: '${{ needs.traffic-switch.result == 'success' && needs.post-deploy-monitoring.result == 'success' && 'success' || 'failure' }}',
              environment_url: 'https://monad-synapse.com',
              description: 'Production deployment ${{ needs.pre-production-validation.outputs.version-tag }}'
            });